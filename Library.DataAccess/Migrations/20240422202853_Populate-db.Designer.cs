// <auto-generated />
using System;
using Library.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library.DataAccess.Migrations
{
    [DbContext(typeof(LibraryDbContext))]
    [Migration("20240422202853_Populate-db")]
    partial class Populatedb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Library.DataAccess.Models.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04fde10e-07d0-4ac2-8fb0-4ceefee1c440"),
                            Author = "J.K. Rowling",
                            GenreId = new Guid("72c95090-df2a-4deb-b004-b60cc6f859b1"),
                            IsAvailable = true,
                            Name = "Harry Potter and the Sorcerer's Stone"
                        },
                        new
                        {
                            Id = new Guid("c84cb351-21a3-4761-9c03-36f7faf6d913"),
                            Author = "Frank Herbert",
                            GenreId = new Guid("a879815c-b86d-486d-913f-398e778ae7d5"),
                            IsAvailable = true,
                            Name = "Dune"
                        },
                        new
                        {
                            Id = new Guid("7b02fd30-fbd1-4fe9-9c7c-21353d2b8753"),
                            Author = "Dan Brown",
                            GenreId = new Guid("9759196f-6ddd-48ec-8023-bf3d4939ddee"),
                            IsAvailable = true,
                            Name = "The Da Vinci Code"
                        },
                        new
                        {
                            Id = new Guid("ce0d6382-f675-419d-8b6e-f9911e6e28b7"),
                            Author = "Gillian Flynn",
                            GenreId = new Guid("a4bf4b23-9abf-4192-9f38-4a98d8a69db4"),
                            IsAvailable = true,
                            Name = "Gone Girl"
                        },
                        new
                        {
                            Id = new Guid("97be5873-34bf-413f-9040-3f5170f6935f"),
                            Author = "Jane Austen",
                            GenreId = new Guid("e659876b-929d-4dd6-93e0-1e7551516067"),
                            IsAvailable = true,
                            Name = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = new Guid("45f73c2b-238a-416f-bb44-1c957474dcaa"),
                            Author = "Stephen King",
                            GenreId = new Guid("4662dd99-7be9-428c-82d6-48de992124b2"),
                            IsAvailable = true,
                            Name = "The Shining"
                        },
                        new
                        {
                            Id = new Guid("347db0b5-95ea-4db0-aec2-a0ad3217d7d6"),
                            Author = "F. Scott Fitzgerald",
                            GenreId = new Guid("f5da4675-6977-4bdb-a3e0-d51d9c67be9a"),
                            IsAvailable = true,
                            Name = "The Great Gatsby"
                        },
                        new
                        {
                            Id = new Guid("2e34af54-97c9-4faf-a1d6-44ca25121772"),
                            Author = "J.R.R. Tolkien",
                            GenreId = new Guid("14db060d-ee2e-460b-b3fc-7cf33878f15b"),
                            IsAvailable = true,
                            Name = "The Hobbit"
                        },
                        new
                        {
                            Id = new Guid("8eb6f51c-4e25-4e32-835e-8f50c17de5c7"),
                            Author = "Suzanne Collins",
                            GenreId = new Guid("d492b0c7-9448-4028-824c-044073426ef4"),
                            IsAvailable = true,
                            Name = "The Hunger Games"
                        },
                        new
                        {
                            Id = new Guid("c747ec7c-ab63-4543-8b71-fb641e1ecb6c"),
                            Author = "Harper Lee",
                            GenreId = new Guid("a12d55cc-1765-4003-bf4b-e75f001c83b0"),
                            IsAvailable = true,
                            Name = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = new Guid("460d523d-4b95-4ea5-a2a5-1e6e95871500"),
                            Author = "Tara Westover",
                            GenreId = new Guid("388d270c-4e17-4dfe-8600-d9ace6100e0b"),
                            IsAvailable = true,
                            Name = "Educated"
                        },
                        new
                        {
                            Id = new Guid("4110181e-95dc-439a-b1dc-a1cdb7757583"),
                            Author = "Michelle Obama",
                            GenreId = new Guid("a9b6addc-358a-46af-bef6-fe85d8c1e04e"),
                            IsAvailable = true,
                            Name = "Becoming"
                        },
                        new
                        {
                            Id = new Guid("4e5a1332-a404-431e-936f-246180d831b9"),
                            Author = "Eckhart Tolle",
                            GenreId = new Guid("74bbc296-22c8-47f2-a7bf-513d7a26fac8"),
                            IsAvailable = true,
                            Name = "The Power of Now"
                        },
                        new
                        {
                            Id = new Guid("89485f68-de89-4a15-9052-ddeb1bd49bc0"),
                            Author = "Chrissy Teigen",
                            GenreId = new Guid("f2d2beea-2570-434e-b77d-377c4e6faa47"),
                            IsAvailable = true,
                            Name = "Cravings: Recipes for All the Food You Want to Eat"
                        },
                        new
                        {
                            Id = new Guid("6c6cf7be-e936-4f73-9e85-defeb1ae669e"),
                            Author = "Jon Krakauer",
                            GenreId = new Guid("14134c96-c62b-44e1-9fbe-154e95985b4e"),
                            IsAvailable = true,
                            Name = "Into the Wild"
                        },
                        new
                        {
                            Id = new Guid("ea083009-68aa-46d8-aab8-59b244111d9e"),
                            Author = "Stephen Hawking",
                            GenreId = new Guid("e36d0506-d7fa-4528-9dae-3fccf5f434bc"),
                            IsAvailable = true,
                            Name = "A Brief History of Time"
                        },
                        new
                        {
                            Id = new Guid("cb6b5f70-2335-4ac5-99be-0581ca1a6908"),
                            Author = "Neil Gaiman",
                            GenreId = new Guid("770c8ad3-f8c5-461b-b919-be89ba44e6bb"),
                            IsAvailable = true,
                            Name = "The Sandman"
                        },
                        new
                        {
                            Id = new Guid("35ab1292-61b2-48c2-a536-610db3ec9dae"),
                            Author = "Andrzej Sapkowski",
                            GenreId = new Guid("a7a36ece-d600-4692-9569-0c4435de445a"),
                            IsAvailable = true,
                            Name = "The Last Wish"
                        },
                        new
                        {
                            Id = new Guid("77ec3efd-0945-4587-82c5-720b03b532c0"),
                            Author = "Rupi Kaur",
                            GenreId = new Guid("81e77bec-f302-4824-bb1a-85d5db36f244"),
                            IsAvailable = true,
                            Name = "The Sun and Her Flowers"
                        },
                        new
                        {
                            Id = new Guid("a850db48-9acd-4fca-a92e-58a27e7299e8"),
                            Author = "Rupi Kaur",
                            GenreId = new Guid("81e77bec-f302-4824-bb1a-85d5db36f244"),
                            IsAvailable = true,
                            Name = "Milk and Honey"
                        });
                });

            modelBuilder.Entity("Library.DataAccess.Models.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = new Guid("72c95090-df2a-4deb-b004-b60cc6f859b1"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("a879815c-b86d-486d-913f-398e778ae7d5"),
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = new Guid("9759196f-6ddd-48ec-8023-bf3d4939ddee"),
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = new Guid("a4bf4b23-9abf-4192-9f38-4a98d8a69db4"),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = new Guid("e659876b-929d-4dd6-93e0-1e7551516067"),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = new Guid("4662dd99-7be9-428c-82d6-48de992124b2"),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = new Guid("f5da4675-6977-4bdb-a3e0-d51d9c67be9a"),
                            Name = "Historical Fiction"
                        },
                        new
                        {
                            Id = new Guid("14db060d-ee2e-460b-b3fc-7cf33878f15b"),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = new Guid("d492b0c7-9448-4028-824c-044073426ef4"),
                            Name = "Young Adult"
                        },
                        new
                        {
                            Id = new Guid("a12d55cc-1765-4003-bf4b-e75f001c83b0"),
                            Name = "Literary Fiction"
                        },
                        new
                        {
                            Id = new Guid("388d270c-4e17-4dfe-8600-d9ace6100e0b"),
                            Name = "Non-Fiction"
                        },
                        new
                        {
                            Id = new Guid("a9b6addc-358a-46af-bef6-fe85d8c1e04e"),
                            Name = "Biography"
                        },
                        new
                        {
                            Id = new Guid("74bbc296-22c8-47f2-a7bf-513d7a26fac8"),
                            Name = "Memoir"
                        },
                        new
                        {
                            Id = new Guid("f2d2beea-2570-434e-b77d-377c4e6faa47"),
                            Name = "Self-Help"
                        },
                        new
                        {
                            Id = new Guid("14134c96-c62b-44e1-9fbe-154e95985b4e"),
                            Name = "Cookbooks"
                        },
                        new
                        {
                            Id = new Guid("e36d0506-d7fa-4528-9dae-3fccf5f434bc"),
                            Name = "Travel"
                        },
                        new
                        {
                            Id = new Guid("770c8ad3-f8c5-461b-b919-be89ba44e6bb"),
                            Name = "Science"
                        },
                        new
                        {
                            Id = new Guid("a7a36ece-d600-4692-9569-0c4435de445a"),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = new Guid("65c5f9a9-74e5-4908-9f91-85d016cabbc7"),
                            Name = "Graphic Novels"
                        },
                        new
                        {
                            Id = new Guid("81e77bec-f302-4824-bb1a-85d5db36f244"),
                            Name = "Poetry"
                        });
                });

            modelBuilder.Entity("Library.DataAccess.Models.Record", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("Library.DataAccess.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Library.DataAccess.Models.Book", b =>
                {
                    b.HasOne("Library.DataAccess.Models.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Library.DataAccess.Models.Record", b =>
                {
                    b.HasOne("Library.DataAccess.Models.Book", "Book")
                        .WithMany("Records")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.DataAccess.Models.User", "User")
                        .WithMany("Records")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Library.DataAccess.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Library.DataAccess.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library.DataAccess.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Library.DataAccess.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Library.DataAccess.Models.Book", b =>
                {
                    b.Navigation("Records");
                });

            modelBuilder.Entity("Library.DataAccess.Models.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Library.DataAccess.Models.User", b =>
                {
                    b.Navigation("Records");
                });
#pragma warning restore 612, 618
        }
    }
}
